{"meta":{"title":"ticsmatic","subtitle":"路漫漫其修远兮 吾将上下而求索","description":"ticsmatic","author":"ticsmatic","url":"https://ticsmatic.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-23T15:47:03.484Z","updated":"2020-04-23T15:47:03.481Z","comments":true,"path":"404.html","permalink":"https://ticsmatic.com/404.html","excerpt":"","text":"404很抱歉，您访问的页面不存在您可以邮件通知我"},{"title":"","date":"2020-04-23T08:57:26.688Z","updated":"2020-04-23T08:57:26.688Z","comments":true,"path":"baidu_verify_TchHVSjADz.html","permalink":"https://ticsmatic.com/baidu_verify_TchHVSjADz.html","excerpt":"","text":"TchHVSjADz"},{"title":"","date":"2020-04-23T08:57:43.168Z","updated":"2020-04-23T08:57:43.168Z","comments":true,"path":"baidu_verify_WIV2O9P8jO.html","permalink":"https://ticsmatic.com/baidu_verify_WIV2O9P8jO.html","excerpt":"","text":"WIV2O9P8jO"},{"title":"","date":"2020-04-23T08:58:24.349Z","updated":"2020-04-23T08:58:24.349Z","comments":true,"path":"google381672dcc63a6da1.html","permalink":"https://ticsmatic.com/google381672dcc63a6da1.html","excerpt":"","text":"google-site-verification: google381672dcc63a6da1.html"},{"title":"所有分类","date":"2020-04-20T14:24:30.315Z","updated":"2020-04-20T14:24:30.302Z","comments":true,"path":"categories/index.html","permalink":"https://ticsmatic.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-04-20T14:24:02.843Z","updated":"2020-04-20T14:24:02.827Z","comments":true,"path":"about/index.html","permalink":"https://ticsmatic.com/about/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-04-23T09:41:51.643Z","updated":"2020-04-23T09:41:51.603Z","comments":true,"path":"tags/index.html","permalink":"https://ticsmatic.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"新文章","slug":"新文章","date":"2020-04-22T10:10:31.583Z","updated":"2020-04-23T10:01:37.553Z","comments":true,"path":"posts/bfe2ba5b/","link":"","permalink":"https://ticsmatic.com/posts/bfe2ba5b/","excerpt":"","text":"😃","categories":[],"tags":[]},{"title":"GitBook安装和使用","slug":"GitBook安装和使用","date":"2020-04-17T03:18:31.793Z","updated":"2020-04-23T02:19:06.461Z","comments":true,"path":"posts/9aea9f9/","link":"","permalink":"https://ticsmatic.com/posts/9aea9f9/","excerpt":"介绍GitBook安装和使用","text":"介绍GitBook安装和使用安装GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。因为 GitBook 是基于 Node.js，所以我们首先需要安装 Node.js1234567891011&#x2F;&#x2F; 检查是否有Node.js环境$ node -v&#x2F;&#x2F; 如果没有node环境的，先安装Node环境$ brew install node&#x2F;&#x2F; 现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook：npm install -g gitbook-cli&#x2F;&#x2F; 检查是否安装成功gitbook -v使用想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。但是现在有了 GitBook，你首先要做的是在 mybook 文件夹下执行以下命令：1gitbook init执行完后，你会看到多了两个文件 —— README.md 和 SUMMARY.md，它们的作用如下：README.md —— 书籍的介绍写在这个文件里SUMMARY.md —— 书籍的目录结构在这里配置然后就是编辑这个书的目录了，实际上需要一个支持MarkDown的编辑器，我们使用VSCode，来编辑 README.md 和 SUMMARY.md文件编辑 SUMMARY.md 文件，内容修改为：12345678910111213141516171819202122232425* [Python 基础](README.md)* 1.python基础 * [1.1.认识Python](day01&#x2F;01-Python简介.md) * [1.2.第一个Python程序](day01&#x2F;02-第一个程序.md) * [1.3.Pycharm设置（知道）](day01&#x2F;03-Pycharm设置（知道）.md) * [1.4.多文件项目的演练](day02&#x2F;04-多文件项目的演练.md) * [1.5.注释](day02&#x2F;05-注释.md) * [1.6.算数运算符](day02&#x2F;06-算数运算符.md) * [1.7.程序执行原理（科普）](day02&#x2F;07-程序执行原理（科普）.md) * [1.8.变量的基本使用](day02&#x2F;08-变量的基本使用.md)* day03 * [1.9.变量的命名](day03&#x2F;09-变量的命名.md) * [1.10.判断（if）语句](day03&#x2F;10-判断（if）语句.md) * [1.11.运算符](day03&#x2F;11-运算符.md) * [1.12.循环](day03&#x2F;12-循环.md)* day04 * [函数基础](day04&#x2F;函数基础.md)* day05 * [高级变量类型](day05&#x2F;高级变量类型.md)* day06 * [综合应用——名片管理系统](day06&#x2F;综合应用——名片管理系统.md)* day07 * [变量进阶（理解）](day07&#x2F;变量进阶（理解）.md) * [函数进阶](day07&#x2F;函数进阶.md)然后我们回到命令行，在 mybook 文件夹中再次执行gitbook init命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。接着我们执行gitbook serve 来预览这本书籍，执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 “Serving book on http://localhost:4000”。嗯，打开浏览器看一下吧.当你写得差不多，你可以执行 gitbook build 命令构建书籍，默认将生成的静态网站输出到 _book 目录。实际上，这一步也包含在 gitbook serve 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。当然，build 命令可以指定路径：1gitbook build [书籍路径] [输出路径]serve 命令也可以指定端口：1gitbook serve --port 2333你还可以生成 PDF 格式的电子书：123gitbook pdf .&#x2F; .&#x2F;mybook.pdfgitbook epub .&#x2F; .&#x2F;mybook.epubgitbook mobi .&#x2F; .&#x2F;mybook.mobi如果生成不了，你可能还需要安装一些工具，比如 ebook-convert。或者在 Typora 中安装 Pandoc 进行导出。此时基本就完成了。安装过程中遇到的问题gitbook init超时解决：替换npm的源gitbook build生成的html本地不能跳转解决：修改书籍下”theme.js”文件的内容。把if(m)for(替换为if(false)for(","categories":[],"tags":[]},{"title":"使用Hexo搭建博客","slug":"使用Hexo搭建博客","date":"2020-04-15T08:26:43.109Z","updated":"2020-04-23T10:02:15.232Z","comments":true,"path":"posts/eb656981/","link":"","permalink":"https://ticsmatic.com/posts/eb656981/","excerpt":"介绍使用Hexo搭建博客","text":"介绍使用Hexo搭建博客[TOC]环境mac 10.14默认已安装好了HomeBrew和Git搭建安装Node.js环境先检测电脑山管是否安装有Node.js环境，能正确显示版本号即表示node安装成功（mac不自带Node.js环境）12$ npm -v$ node -v安装Node.js（Hexo是基于Node.js环境的）1$ brew install node安装npm1$ npm install安装Hexo安装12# -g表示全局安装$ npm install hexo-cli -g初始化博客12$ cd myblog # 创建并进入存储博客的目录(myblog)$ hexo init # 初始化本地博客生成并运行服务执行下述命令生成本地网页文件并开启服务器，然后通过http://localhost:4000查看本地博客。12$ hexo g # Generate static files$ hexo s # Run server关联GitHub修改myblog目录下的_config.yml文件1234deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git branch: maste双线部署123456deploy: type: git repo: gitee: https:&#x2F;&#x2F;gitee.com&#x2F;ticsmatic&#x2F;ticsmatic.git github: https:&#x2F;&#x2F;github.com&#x2F;ticsmatic&#x2F;ticsmatic.github.io.git branch: master部署发布1234$ hexo g $ hexo d &#x2F;&#x2F; Deploy to remote sites或者使用组合命令：$ hexo d -g若执行hexo g出错则执行npm install hexo --save，若执行hexo d出错则执行npm install hexo-deployer-git --save。错误修正后再次执行hexo g和hexo d上传到服务器若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:12username for &#39;https:&#x2F;&#x2F;github.com&#39;:password for &#39;https:&#x2F;&#x2F;github.com&#39;:hexo d执行成功后便可通过git 仓库地址访问博客，看到的内容和http://localhost:4000相同。更换Hexo主题以比较精简的为例 maupassant123$ git clone https:&#x2F;&#x2F;github.com&#x2F;tufu9441&#x2F;maupassant-hexo.git themes&#x2F;maupassant$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save将myblog目录下_config.yml里的theme的名称landscape更改为next。123$ hexo g &#x2F;&#x2F; 生成缓存和静态文件$ hexo d &#x2F;&#x2F; 重新部署到服务器$ hexo s &#x2F;&#x2F; Run server当本地博客部署到服务器后，网页端无变化时可以采用下述命令。1hexo clean &#x2F;&#x2F; 清楚缓存文件(db.json)和已生成的静态文件(public)推荐主题A-BoyAnisinaMaupassant 更适用于写文章JacmanMaterial-Xhexo-theme-sukavolantis ✔️写个博客1$ hexo new &quot;article title&quot;然后执行生成，发布即可其它知识当安装的一些插件不需要时，可以卸载123456npm uninstall 模块 删除本地模块时你应该思考的问题：是否将在package.json上的相应依赖信息也消除？npm uninstall 模块：删除模块，但不删除模块留在package.json中的对应信息npm uninstall 模块 --save 删除模块，同时删除模块留在package.json中dependencies下的对应信息npm uninstall 模块 --save-dev 删除模块，同时删除模块留在package.json中devDependencies下的对应信息参考hexo官方文档","categories":[],"tags":[]},{"title":"Git基础操作","slug":"Git基础操作","date":"2020-04-15T08:26:43.109Z","updated":"2020-04-23T02:19:06.467Z","comments":true,"path":"posts/22f526fc/","link":"","permalink":"https://ticsmatic.com/posts/22f526fc/","excerpt":"z","text":"zGit基础操作更多参考：GitBook V2配置账户123456$ git version # 查看版本$ git config -l # 查看当前配置$ git config --global user.name &quot;Dean&quot; # 设置用户名，邮箱 $ git config --global user.email g.xiangyu1990@gmail.com # 设置用户名，邮箱 $ git config --global alias.ci commit # 设置git命令的别名$ git config --global alias.co checkout # 设置git命令的别名仓库(repository)12$ git init # 创建一个本地的git仓库$ git clone https:&#x2F;&#x2F;xx.git &#x2F;path # 克隆一个远程的git仓库到指定路径添加(add)1234$ git add fileA fileB # 将本地指定文件名或目录（新增和修改，没有删除）的文件添加到暂存区$ git add . # 将本地所有的（新增和修改，没有删除）文件添加到暂存区$ git add -u # 将本地的（修改和删除，没有新增）文件添加到暂存区$ git add -A # 将本地所有改动添加到暂存区（git add -A &#x3D; git add . + git add -u）删除/重命名(rm/mv)1234git rm &lt;file&gt; # 删除文件git rm -r &lt;floder&gt; # 删除文件夹git rm --cached &lt;file&gt; # 从版本库中删除文件，但不删除文件，此时文件只会在本地存在 git mv &lt;old_name&gt; &lt;new_name&gt; # 文件重命名提交(commit)12345$ git commit m &quot;add file&quot;$ git commit -am &quot;add file&quot; # 等价于git add . + git commit -m &quot;add file&quot;$ git commit -m &quot;add fileA&quot; readme.md # 提交一个文件$ git commit &quot;增补提交&quot; --amend # 增补提交 $ git commit -C head --amend状态(status)123$ git status # 查看你的代码在缓存与当前工作目录的状态$ git status -s # 将结果以简短的形式输出$ git status --ignored # 显示被忽略的文件差异(diff)123456$ git diff # 查看工作目录（working tree）暂存区（index）的差别$ git diff --cached # 查看暂存起来的文件（stage）与并未提交（commit）的差别$ git diff --staged # 同上$ git diff HEAD # 查看最后一次提交之后的的差别（HEAD代表最近一次commit的信息）$ git diff --stat # 查看显示简略结果(文件列表)$ git diff commit1 commit2 # 对比两次提交的内容（也可以是branch，哈希值）查看历史(log)1234567# https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-log$ git log -2 # 查看前2次修改$ git log --oneline # 一行显示一条log$ git log -p # 查看详细修改内容 $ git log --stat # 查看提交统计信息$ git log --graph # 显示何时出现了分支和合并等信息$ git reflog # 重返未来，以便确定要回到未来的哪个版本暂存(stash)1234567$ git stash # 存储$ git stash save &quot;message&quot; # 存储加说明$ git stash list # 查看储藏列表$ git stash pop # 恢复并删除存储$ git stash apply # 恢复最新的保存，但不删除$ git stash drop stash@&#123;0&#125; # 删除$ git stash clear # 删除所有取消/重置(checkout/reset)12345678910$ git checkout file1 file2 # 撤销未提交的修改$ git checkout . # 撤销所有未提交的文件修改$ git reset --mixed # git reset默认值，重置暂存区，但不改变工作区，再提交的话需要先添加到暂存区再commit$ git reset --soft # 回退到某个版本，不改变暂存区和工作区（如果还要提交，直接commit即可）$ git reset --hard # 彻底回退到某个版本，替换暂存区和工作区，本地的源码也会变为上一个版本的内容# 彻底回退到某个版本$ git reset commit_id$ git reset head^$ git reset filename # 将文件撤出暂存区（相当于git add filename的反向操作）撤销(revert)123456$ git revert commit # 撤销指定commit$ git revert -no-edit HEAD # 撤销上一次并直接使用默认注释$ git revert -n HEAD # 撤销上一次但不commit$ git revert -m 1 mergecomitid # 撤销分支的合并，且保留现有分支之后的提交记录(实践：feature分支合并到Dev分支，一段时间后发现这个feature分支有严重的bug，影响到Dev分支下业务的进行需要撤销掉feature分支的代码，可使用git revert命令，常用的附加参数是‘-m 1’，代表保留dev分支后的代码。撤销提交过程一般会有冲突，解决冲突，提交代码为commitidR, 当feature分支的bug修复完成，再次往Dev合并时，需要先git revert commitidR，然后把feature合并到dev上，流程完毕)本地分支查看、新建、切换1234567$ git branch -a # 列出所有分支信息$ git branch &lt;branchname&gt; # 新建分支$ git checkout &lt;branchname&gt; # 切换分支$ git checkout -b &lt;branchname&gt; # 基于当前分支创建并且换到新分支$ git branch feature&#x2F;login 82b31b # 基于某次提交、分支、或标签新建分支$ git branch tmp feature&#x2F;login分支合并(merge)123$ git merge feature&#x2F;login # 在develop分支上，把feature分支合并到develop分支$ git merge feature --no-ff -m &quot;msg&quot; # 强制显示每次操作变基(rebase)1234$ git rebase &lt;branch_name&gt; # 目标分支$ git rebase --continue # 执行rebase出现冲突解决后，执行该命令会继续应用(apply)余下的补丁$ git rebase --skip # 跳过当前提交，取以服务端为准$ git rebase --abort # 终止rebase, 分支会回到rebase开始前的状态删除分支12$ git branch -d feature&#x2F;login$ git branch -D feature&#x2F;login # 强制删除，即使分支没有被合并也删除远端分支新建、删除、关联本地分支123$ git push origin locbranch:originbranch # 新建$ git push origin --delete &lt;branchname&gt; # 删除$ git branch --set-upstream-to&#x3D;origin&#x2F;develop develop # 关联本地分支分支拉取(fetch/pull)12345$ git fetch origin develop # 只是获取远程仓库的数据至.git目录，并未merge本地$ git merge origin&#x2F;develop # 把获取的远程仓库的数据手工merge至当前分支$ git pull origin develop # 获取远程仓库的数据，并自动merge至当前的分支，相当于以上两步, git pull &#x3D;&#x3D; git fetch + git merge$ git pull --rebase # 也可以使用git pull的rebase策略分支推送12$ git push -f # 强推$ git push --all # 本地所有分支推送到远端prune1git remote prune origin # 修剪远程分支标签12345678$ git tag v1.0.0 commit_id # 新建（标签不能重命名）$ git tag # 查看$ git show v1.0.0$ git tag -d v1.0.0 # 删除$ git push origin v1.0.0 # 推送标签$ git push origin --tags$ git push origin :v1.0.0 # 删除远端标签$ git checkout -b branch_name tag_name # 切换到某个tag其它操作冲突123456&#39;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39;之间的内容是我的修改&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;之间的内容是别人的修改&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;一般是删除冲突标记，并解决冲突Vi编辑器12345$ vi filename # 创建文件 touch filenamevi编辑: i按ESC键 跳到命令模式:wq 是保存退出 :q! 是不保存强制退出硬核配置项目git(.git/config文件)1234567891011121314151617直接打开.git目录下的config文件进行编辑，参考内容如下[core] repositoryformatversion &#x3D; 0 filemode &#x3D; true bare &#x3D; false logallrefupdates &#x3D; true ignorecase &#x3D; true precomposeunicode &#x3D; true[remote &quot;origin&quot;] url &#x3D; https:&#x2F;&#x2F;gitee.com&#x2F;ticsmatic_admin&#x2F;CodeStore.git fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*[branch &quot;master&quot;] remote &#x3D; origin merge &#x3D; refs&#x2F;heads&#x2F;master[branch &quot;develop&quot;] remote &#x3D; origin merge &#x3D; refs&#x2F;heads&#x2F;develop单文件回退1$ git reset comit_id filename # 把某个文件回退到某个提交历史，checkout也可以","categories":[],"tags":[]},{"title":"阿里云SSL证书使用","slug":" 阿里云SSL证书使用","date":"2020-04-15T01:39:01.616Z","updated":"2020-04-23T10:02:25.510Z","comments":true,"path":"posts/2c49c232/","link":"","permalink":"https://ticsmatic.com/posts/2c49c232/","excerpt":"标题","text":"标题阿里云SSL证书使用流程概要购买-&gt;申请证书（提交资料，填入域名、联系方式）-&gt;ssl域名解析验证-&gt;等待审核(大致5分钟)-&gt;审核成功-下载使用购买采用免费的个人版使用购买后点击”申请证书“填入资料（域名、联系人、联系方式）提交审核，大约3-20分钟，审核成功然后下载证书（选择需要的证书类型，有Tomcat、Apache、Nginx、IIS等）实例（为七牛云配置Https证书）购买SSL证书在阿里云购买证书SSL证书填写SSL证书申请资料填写申请资料，其中要绑定的域名为cdn.ticsmatic.com，然后验证域名解析，验证成功下载证书然后等待证书审核成功，下载Nginx类型的证书（因为七牛云需要的证书格式是pem、key，Nginx服务类型的证书刚好符合）分割线使用证书在七牛云的SSL证书服务tab下，上传在阿里云下载的SSL证书七牛云添加域名在七牛云的CDN下添加自己的域名cdn.ticsmatic.com，选择已经添加的https证书七牛云cname解析添加完域名后，七牛云会提示去对应的域名服务商进行cname域名解析。进入到阿里云的域名解析，解析七牛云的域名。填写cname信息后，去七牛云验证是佛解析成功（一般实时出结果）在七牛云中使用自定义的域名在气七牛云的对象存储服务中，绑定自己的域名cdn.ticsmatic.com，然后访问路径下的对象资源时，前缀就是cdn.ticsmatic.com","categories":[],"tags":[]},{"title":"使用volantis主题","slug":"volantis主题使用","date":"2020-04-14T09:25:58.266Z","updated":"2020-04-23T02:19:06.466Z","comments":true,"path":"posts/6cb5ab8a/","link":"","permalink":"https://ticsmatic.com/posts/6cb5ab8a/","excerpt":"z","text":"z[TOC]演示地址文档地址开始使用开始使用第1/3步：下载主题源码到 themes/ 文件夹1git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis themes&#x2F;volantis第2/3步：修改站点配置文件 blog/_config.yml1theme: volantis第3/3步：检查并安装依赖安装 Hexo 搜索的依赖包：1npm i -S hexo-generator-search hexo-generator-json-content安装 stylus 渲染器：1npm i -S hexo-renderer-stylus站点文档主题文档页面文档写作文档红色Volantis为简单的一句话提供的简便写法。纯文本测试","categories":[{"name":"ios","slug":"ios","permalink":"https://ticsmatic.com/categories/ios/"}],"tags":[]}],"categories":[{"name":"ios","slug":"ios","permalink":"https://ticsmatic.com/categories/ios/"}],"tags":[]}