<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新文章</title>
      <link href="/posts/bfe2ba5b/"/>
      <url>/posts/bfe2ba5b/</url>
      
        <content type="html"><![CDATA[<p>😃</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云SSL证书使用</title>
      <link href="/posts/2c49c232/"/>
      <url>/posts/2c49c232/</url>
      
        <content type="html"><![CDATA[<p>标题</p><a id="more"></a><h1 id="阿里云SSL证书使用"><a href="#阿里云SSL证书使用" class="headerlink" title="阿里云SSL证书使用"></a>阿里云SSL证书使用</h1><p>流程概要<br>购买-&gt;申请证书（提交资料，填入域名、联系方式）-&gt;ssl域名解析验证-&gt;等待审核(大致5分钟)-&gt;审核成功-下载使用</p><h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p>采用免费的个人版</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>购买后点击”申请证书“<br>填入资料（域名、联系人、联系方式）<br>提交审核，大约3-20分钟，审核成功<br>然后下载证书（选择需要的证书类型，有Tomcat、Apache、Nginx、IIS等）</p><h2 id="实例（为七牛云配置Https证书）"><a href="#实例（为七牛云配置Https证书）" class="headerlink" title="实例（为七牛云配置Https证书）"></a>实例（为七牛云配置Https证书）</h2><ol><li>购买SSL证书<br>在阿里云购买证书SSL证书</li><li>填写SSL证书申请资料<br>填写申请资料，其中要绑定的域名为<code>cdn.ticsmatic.com</code>，然后验证域名解析，验证成功</li><li>下载证书<br>然后等待证书审核成功，下载Nginx类型的证书（因为七牛云需要的证书格式是pem、key，Nginx服务类型的证书刚好符合）<br>分割线</li><li>使用证书<br>在七牛云的<code>SSL证书服务</code>tab下，上传在阿里云下载的SSL证书</li><li>七牛云添加域名<br>在七牛云的<code>CDN</code>下添加自己的域名<code>cdn.ticsmatic.com</code>，选择已经添加的https证书</li><li>七牛云cname解析<br>添加完域名后，七牛云会提示去对应的域名服务商进行cname域名解析。进入到阿里云的域名解析，解析七牛云的域名。填写cname信息后，去七牛云验证是佛解析成功（一般实时出结果）</li><li>在七牛云中使用自定义的域名<br>在气七牛云的<code>对象存储</code>服务中，绑定自己的域名<code>cdn.ticsmatic.com</code>，然后访问路径下的对象资源时，前缀就是<code>cdn.ticsmatic.com</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitBook安装和使用</title>
      <link href="/posts/9aea9f9/"/>
      <url>/posts/9aea9f9/</url>
      
        <content type="html"><![CDATA[<p>介绍GitBook安装和使用</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。</p><p>因为 GitBook 是基于 Node.js，所以我们首先需要安装 Node.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查是否有Node.js环境</span><br><span class="line">$ node -v</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果没有node环境的，先安装Node环境</span><br><span class="line">$ brew install node</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook：</span><br><span class="line">npm install -g gitbook-cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查是否安装成功</span><br><span class="line">gitbook -v</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。但是现在有了 GitBook，你首先要做的是在 mybook 文件夹下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p>执行完后，你会看到多了两个文件 —— README.md 和 SUMMARY.md，它们的作用如下：</p><blockquote><p>README.md —— 书籍的介绍写在这个文件里<br>SUMMARY.md —— 书籍的目录结构在这里配置</p></blockquote><p>然后就是编辑这个书的目录了，实际上需要一个支持MarkDown的编辑器，我们使用VSCode，来编辑 README.md 和 SUMMARY.md文件</p><p>编辑 SUMMARY.md 文件，内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* [Python 基础](README.md)</span><br><span class="line">* 1.python基础</span><br><span class="line">  * [1.1.认识Python](day01&#x2F;01-Python简介.md)</span><br><span class="line">  * [1.2.第一个Python程序](day01&#x2F;02-第一个程序.md)</span><br><span class="line">  * [1.3.Pycharm设置（知道）](day01&#x2F;03-Pycharm设置（知道）.md)</span><br><span class="line">  * [1.4.多文件项目的演练](day02&#x2F;04-多文件项目的演练.md)</span><br><span class="line">  * [1.5.注释](day02&#x2F;05-注释.md)</span><br><span class="line">  * [1.6.算数运算符](day02&#x2F;06-算数运算符.md)</span><br><span class="line">  * [1.7.程序执行原理（科普）](day02&#x2F;07-程序执行原理（科普）.md)</span><br><span class="line">  * [1.8.变量的基本使用](day02&#x2F;08-变量的基本使用.md)</span><br><span class="line">* day03</span><br><span class="line">  * [1.9.变量的命名](day03&#x2F;09-变量的命名.md)</span><br><span class="line">  * [1.10.判断（if）语句](day03&#x2F;10-判断（if）语句.md)</span><br><span class="line">  * [1.11.运算符](day03&#x2F;11-运算符.md)</span><br><span class="line">  * [1.12.循环](day03&#x2F;12-循环.md)</span><br><span class="line">* day04</span><br><span class="line">  * [函数基础](day04&#x2F;函数基础.md)</span><br><span class="line">* day05</span><br><span class="line">  * [高级变量类型](day05&#x2F;高级变量类型.md)</span><br><span class="line">* day06</span><br><span class="line">  * [综合应用——名片管理系统](day06&#x2F;综合应用——名片管理系统.md)</span><br><span class="line">* day07</span><br><span class="line">  * [变量进阶（理解）](day07&#x2F;变量进阶（理解）.md)</span><br><span class="line">  * [函数进阶](day07&#x2F;函数进阶.md)</span><br></pre></td></tr></table></figure><p>然后我们回到命令行，在 mybook 文件夹中再次执行<code>gitbook init</code>命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。</p><p>接着我们执行<code>gitbook serve</code> 来预览这本书籍，执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 “Serving book on <a href="http://localhost:4000”。嗯，打开浏览器看一下吧">http://localhost:4000”。嗯，打开浏览器看一下吧</a>.</p><p>当你写得差不多，你可以执行 gitbook build 命令构建书籍，默认将生成的静态网站输出到 _book 目录。实际上，这一步也包含在 gitbook serve 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。</p><p>当然，build 命令可以指定路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build [书籍路径] [输出路径]</span><br></pre></td></tr></table></figure><p>serve 命令也可以指定端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve --port 2333</span><br></pre></td></tr></table></figure><p>你还可以生成 PDF 格式的电子书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitbook pdf .&#x2F; .&#x2F;mybook.pdf</span><br><span class="line">gitbook epub .&#x2F; .&#x2F;mybook.epub</span><br><span class="line">gitbook mobi .&#x2F; .&#x2F;mybook.mobi</span><br></pre></td></tr></table></figure><p>如果生成不了，你可能还需要安装一些工具，比如 ebook-convert。或者在 Typora 中安装 Pandoc 进行导出。</p><p>此时基本就完成了。</p><h2 id="安装过程中遇到的问题"><a href="#安装过程中遇到的问题" class="headerlink" title="安装过程中遇到的问题"></a>安装过程中遇到的问题</h2><ol><li><p><code>gitbook init</code>超时<br>解决：替换npm的源</p></li><li><p><code>gitbook build</code>生成的html本地不能跳转<br>解决：修改书籍下”theme.js”文件的内容。把<code>if(m)for(</code>替换为<code>if(false)for(</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建博客</title>
      <link href="/posts/eb656981/"/>
      <url>/posts/eb656981/</url>
      
        <content type="html"><![CDATA[<p>介绍使用Hexo搭建博客</p><a id="more"></a><p>[TOC]</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>mac 10.14<br>默认已安装好了HomeBrew和Git</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="安装Node-js环境"><a href="#安装Node-js环境" class="headerlink" title="安装Node.js环境"></a>安装Node.js环境</h3><p>先检测电脑山管是否安装有Node.js环境，能正确显示版本号即表示node安装成功（mac不自带Node.js环境）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br></pre></td></tr></table></figure><p>安装Node.js（Hexo是基于Node.js环境的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install node</span></span><br></pre></td></tr></table></figure><p>安装npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -g表示全局安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g</span></span><br></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd myblog             # 创建并进入存储博客的目录(myblog)</span><br><span class="line">$ hexo init             # 初始化本地博客</span><br></pre></td></tr></table></figure><h3 id="生成并运行服务"><a href="#生成并运行服务" class="headerlink" title="生成并运行服务"></a>生成并运行服务</h3><p>执行下述命令生成本地网页文件并开启服务器，然后通过<a href="http://localhost:4000查看本地博客。">http://localhost:4000查看本地博客。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g                # Generate static files</span><br><span class="line">$ hexo s                # Run server</span><br></pre></td></tr></table></figure><h3 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h3><p>修改myblog目录下的_config.yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">  branch: maste</span><br></pre></td></tr></table></figure><p>双线部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    gitee: https:&#x2F;&#x2F;gitee.com&#x2F;ticsmatic&#x2F;ticsmatic.git</span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;ticsmatic&#x2F;ticsmatic.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部署发布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g </span><br><span class="line">$ hexo d &#x2F;&#x2F; Deploy to remote sites</span><br><span class="line">或者使用组合命令：</span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>若执行<code>hexo g</code>出错则执行<code>npm install hexo --save</code>，<br>若执行<code>hexo d</code>出错则执行<code>npm install hexo-deployer-git --save</code>。错误修正后再次执行<code>hexo g</code>和<code>hexo d</code>上传到服务器</p><p>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username for &#39;https:&#x2F;&#x2F;github.com&#39;:</span><br><span class="line">password for &#39;https:&#x2F;&#x2F;github.com&#39;:</span><br></pre></td></tr></table></figure><p><code>hexo d</code>执行成功后便可通过git 仓库地址访问博客，看到的内容和<a href="http://localhost:4000相同。">http://localhost:4000相同。</a></p><h3 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h3><p>以比较精简的为例 <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;tufu9441&#x2F;maupassant-hexo.git themes&#x2F;maupassant</span><br><span class="line">$ npm install hexo-renderer-pug --save</span><br><span class="line">$ npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p>将myblog目录下_config.yml里的theme的名称landscape更改为next。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  &#x2F;&#x2F; 生成缓存和静态文件</span><br><span class="line">$ hexo d  &#x2F;&#x2F; 重新部署到服务器</span><br><span class="line">$ hexo s  &#x2F;&#x2F; Run server</span><br></pre></td></tr></table></figure><p>当本地博客部署到服务器后，网页端无变化时可以采用下述命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  &#x2F;&#x2F; 清楚缓存文件(db.json)和已生成的静态文件(public)</span><br></pre></td></tr></table></figure><p>推荐主题</p><ul><li><a href="https://github.com/huweihuang/hexo-theme-huweihuang" target="_blank" rel="noopener">A-Boy</a></li><li><a href="https://github.com/huweihuang/hexo-theme-huweihuang" target="_blank" rel="noopener">Anisina</a></li><li><a href="https://link.jianshu.com/?t=https://github.com/icylogic/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> 更适用于写文章</li><li><a href="https://link.jianshu.com/?t=https://github.com/wuchong/jacman" target="_blank" rel="noopener">Jacman</a></li><li><a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material-X</a></li><li><a href="https://github.com/SukkaW/hexo-theme-suka" target="_blank" rel="noopener">hexo-theme-suka</a></li><li><a href="https://github.com/xaoxuu/hexo-theme-volantis" target="_blank" rel="noopener">volantis</a> ✔️</li></ul><h2 id="写个博客"><a href="#写个博客" class="headerlink" title="写个博客"></a>写个博客</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;article title&quot;</span><br></pre></td></tr></table></figure><p>然后执行生成，发布即可</p><h2 id="其它知识"><a href="#其它知识" class="headerlink" title="其它知识"></a>其它知识</h2><p>当安装的一些插件不需要时，可以卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall 模块</span><br><span class="line"> </span><br><span class="line">删除本地模块时你应该思考的问题：是否将在package.json上的相应依赖信息也消除？</span><br><span class="line">npm uninstall 模块：删除模块，但不删除模块留在package.json中的对应信息</span><br><span class="line">npm uninstall 模块 --save 删除模块，同时删除模块留在package.json中dependencies下的对应信息</span><br><span class="line">npm uninstall 模块 --save-dev 删除模块，同时删除模块留在package.json中devDependencies下的对应信息</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git基础操作</title>
      <link href="/posts/22f526fc/"/>
      <url>/posts/22f526fc/</url>
      
        <content type="html"><![CDATA[<p>z</p><a id="more"></a><h3 id="Git基础操作"><a href="#Git基础操作" class="headerlink" title="Git基础操作"></a>Git基础操作</h3><p><img src="https://cdn.ticsmatic.com/git_storehouse_desc.png" alt="git仓库介绍"></p><p>更多参考：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">GitBook V2</a></p><h4 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git version                           # 查看版本</span><br><span class="line">$ git config -l                         # 查看当前配置</span><br><span class="line">$ git config --global user.name &quot;Dean&quot;  # 设置用户名，邮箱 </span><br><span class="line">$ git config --global user.email g.xiangyu1990@gmail.com    # 设置用户名，邮箱 </span><br><span class="line">$ git config --global alias.ci commit   # 设置git命令的别名</span><br><span class="line">$ git config --global alias.co checkout # 设置git命令的别名</span><br></pre></td></tr></table></figure><h4 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库(repository)"></a>仓库(repository)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init                              # 创建一个本地的git仓库</span><br><span class="line">$ git clone https:&#x2F;&#x2F;xx.git &#x2F;path        # 克隆一个远程的git仓库到指定路径</span><br></pre></td></tr></table></figure><h4 id="添加-add"><a href="#添加-add" class="headerlink" title="添加(add)"></a>添加(add)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add fileA fileB                   # 将本地指定文件名或目录（新增和修改，没有删除）的文件添加到暂存区</span><br><span class="line">$ git add .                             # 将本地所有的（新增和修改，没有删除）文件添加到暂存区</span><br><span class="line">$ git add -u                            # 将本地的（修改和删除，没有新增）文件添加到暂存区</span><br><span class="line">$ git add -A                            # 将本地所有改动添加到暂存区（git add -A &#x3D; git add . + git add -u）</span><br></pre></td></tr></table></figure><h4 id="删除-重命名-rm-mv"><a href="#删除-重命名-rm-mv" class="headerlink" title="删除/重命名(rm/mv)"></a>删除/重命名(rm/mv)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;file&gt;                           # 删除文件</span><br><span class="line">git rm -r &lt;floder&gt;                      # 删除文件夹</span><br><span class="line">git rm --cached &lt;file&gt;                  # 从版本库中删除文件，但不删除文件，此时文件只会在本地存在 </span><br><span class="line">git mv &lt;old_name&gt; &lt;new_name&gt;            # 文件重命名</span><br></pre></td></tr></table></figure><h4 id="提交-commit"><a href="#提交-commit" class="headerlink" title="提交(commit)"></a>提交(commit)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git commit m &quot;add file&quot;</span><br><span class="line">$ git commit -am &quot;add file&quot;             # 等价于git add . + git commit -m &quot;add file&quot;</span><br><span class="line">$ git commit -m &quot;add fileA&quot; readme.md   # 提交一个文件</span><br><span class="line">$ git commit &quot;增补提交&quot; --amend          # 增补提交             </span><br><span class="line">$ git commit -C head --amend</span><br></pre></td></tr></table></figure><h4 id="状态-status"><a href="#状态-status" class="headerlink" title="状态(status)"></a>状态(status)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status                            # 查看你的代码在缓存与当前工作目录的状态</span><br><span class="line">$ git status -s                         # 将结果以简短的形式输出</span><br><span class="line">$ git status --ignored                  # 显示被忽略的文件</span><br></pre></td></tr></table></figure><h4 id="差异-diff"><a href="#差异-diff" class="headerlink" title="差异(diff)"></a>差异(diff)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git diff                              # 查看工作目录（working tree）暂存区（index）的差别</span><br><span class="line">$ git diff --cached                     # 查看暂存起来的文件（stage）与并未提交（commit）的差别</span><br><span class="line">$ git diff --staged                     # 同上</span><br><span class="line">$ git diff HEAD                         # 查看最后一次提交之后的的差别（HEAD代表最近一次commit的信息）</span><br><span class="line">$ git diff --stat                       # 查看显示简略结果(文件列表)</span><br><span class="line">$ git diff commit1 commit2              # 对比两次提交的内容（也可以是branch，哈希值）</span><br></pre></td></tr></table></figure><h4 id="查看历史-log"><a href="#查看历史-log" class="headerlink" title="查看历史(log)"></a>查看历史(log)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-log</span><br><span class="line">$ git log -2                            # 查看前2次修改</span><br><span class="line">$ git log --oneline                     # 一行显示一条log</span><br><span class="line">$ git log -p                            # 查看详细修改内容 </span><br><span class="line">$ git log --stat                        # 查看提交统计信息</span><br><span class="line">$ git log --graph                       # 显示何时出现了分支和合并等信息</span><br><span class="line">$ git reflog                            # 重返未来，以便确定要回到未来的哪个版本</span><br></pre></td></tr></table></figure><h4 id="暂存-stash"><a href="#暂存-stash" class="headerlink" title="暂存(stash)"></a>暂存(stash)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git stash                             # 存储</span><br><span class="line">$ git stash save &quot;message&quot;              # 存储加说明</span><br><span class="line">$ git stash list                        # 查看储藏列表</span><br><span class="line">$ git stash pop                         # 恢复并删除存储</span><br><span class="line">$ git stash apply                       # 恢复最新的保存，但不删除</span><br><span class="line">$ git stash drop stash@&#123;0&#125;              # 删除</span><br><span class="line">$ git stash clear                       # 删除所有</span><br></pre></td></tr></table></figure><h4 id="取消-重置-checkout-reset"><a href="#取消-重置-checkout-reset" class="headerlink" title="取消/重置(checkout/reset)"></a>取消/重置(checkout/reset)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout file1 file2              # 撤销未提交的修改</span><br><span class="line">$ git checkout .                        # 撤销所有未提交的文件修改</span><br><span class="line"></span><br><span class="line">$ git reset --mixed                     # git reset默认值，重置暂存区，但不改变工作区，再提交的话需要先添加到暂存区再commit</span><br><span class="line">$ git reset --soft                      # 回退到某个版本，不改变暂存区和工作区（如果还要提交，直接commit即可）</span><br><span class="line">$ git reset --hard                      # 彻底回退到某个版本，替换暂存区和工作区，本地的源码也会变为上一个版本的内容</span><br><span class="line"># 彻底回退到某个版本</span><br><span class="line">$ git reset commit_id</span><br><span class="line">$ git reset head^</span><br><span class="line">$ git reset filename                    # 将文件撤出暂存区（相当于git add filename的反向操作）</span><br></pre></td></tr></table></figure><h4 id="撤销-revert"><a href="#撤销-revert" class="headerlink" title="撤销(revert)"></a>撤销(revert)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git revert commit                     # 撤销指定commit</span><br><span class="line">$ git revert -no-edit HEAD              # 撤销上一次并直接使用默认注释</span><br><span class="line">$ git revert -n HEAD                    # 撤销上一次但不commit</span><br><span class="line">$ git revert -m 1 mergecomitid          # 撤销分支的合并，且保留现有分支之后的提交记录</span><br><span class="line"></span><br><span class="line">(实践：feature分支合并到Dev分支，一段时间后发现这个feature分支有严重的bug，影响到Dev分支下业务的进行需要撤销掉feature分支的代码，可使用git revert命令，常用的附加参数是‘-m 1’，代表保留dev分支后的代码。撤销提交过程一般会有冲突，解决冲突，提交代码为commitidR, 当feature分支的bug修复完成，再次往Dev合并时，需要先git revert commitidR，然后把feature合并到dev上，流程完毕)</span><br></pre></td></tr></table></figure><h4 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h4><h5 id="查看、新建、切换"><a href="#查看、新建、切换" class="headerlink" title="查看、新建、切换"></a>查看、新建、切换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git branch -a                         # 列出所有分支信息</span><br><span class="line">$ git branch &lt;branchname&gt;               # 新建分支</span><br><span class="line">$ git checkout &lt;branchname&gt;             # 切换分支</span><br><span class="line">$ git checkout -b &lt;branchname&gt;          # 基于当前分支创建并且换到新分支</span><br><span class="line">$ git branch feature&#x2F;login 82b31b       # 基于某次提交、分支、或标签新建分支</span><br><span class="line">$ git branch tmp feature&#x2F;login</span><br></pre></td></tr></table></figure><h5 id="分支合并-merge"><a href="#分支合并-merge" class="headerlink" title="分支合并(merge)"></a>分支合并(merge)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git merge feature&#x2F;login               # 在develop分支上，把feature分支合并到develop分支</span><br><span class="line">$ git merge feature --no-ff -m &quot;msg&quot;    # 强制显示每次操作</span><br></pre></td></tr></table></figure><h5 id="变基-rebase"><a href="#变基-rebase" class="headerlink" title="变基(rebase)"></a>变基(rebase)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;branch_name&gt;              # 目标分支</span><br><span class="line">$ git rebase --continue                 # 执行rebase出现冲突解决后，执行该命令会继续应用(apply)余下的补丁</span><br><span class="line">$ git rebase --skip                     # 跳过当前提交，取以服务端为准</span><br><span class="line">$ git rebase --abort                    # 终止rebase, 分支会回到rebase开始前的状态</span><br></pre></td></tr></table></figure><h5 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature&#x2F;login</span><br><span class="line">$ git branch -D feature&#x2F;login           # 强制删除，即使分支没有被合并也删除</span><br></pre></td></tr></table></figure><h4 id="远端分支"><a href="#远端分支" class="headerlink" title="远端分支"></a>远端分支</h4><h5 id="新建、删除、关联本地分支"><a href="#新建、删除、关联本地分支" class="headerlink" title="新建、删除、关联本地分支"></a>新建、删除、关联本地分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin locbranch:originbranch               # 新建</span><br><span class="line">$ git push origin --delete &lt;branchname&gt;                 # 删除</span><br><span class="line">$ git branch --set-upstream-to&#x3D;origin&#x2F;develop develop   # 关联本地分支</span><br></pre></td></tr></table></figure><h5 id="分支拉取-fetch-pull"><a href="#分支拉取-fetch-pull" class="headerlink" title="分支拉取(fetch/pull)"></a>分支拉取(fetch/pull)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git fetch origin develop              # 只是获取远程仓库的数据至.git目录，并未merge本地</span><br><span class="line">$ git merge origin&#x2F;develop              # 把获取的远程仓库的数据手工merge至当前分支</span><br><span class="line">$ git pull origin develop               # 获取远程仓库的数据，并自动merge至当前的分支，相当于以上两步, git pull &#x3D;&#x3D; git fetch + git merge</span><br><span class="line">$ git pull --rebase                     # 也可以使用git pull的rebase策略</span><br></pre></td></tr></table></figure><h5 id="分支推送"><a href="#分支推送" class="headerlink" title="分支推送"></a>分支推送</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push -f                           # 强推</span><br><span class="line">$ git push --all                        # 本地所有分支推送到远端</span><br></pre></td></tr></table></figure><h5 id="prune"><a href="#prune" class="headerlink" title="prune"></a>prune</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin                 # 修剪远程分支</span><br></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0.0 commit_id              # 新建（标签不能重命名）</span><br><span class="line">$ git tag                               # 查看</span><br><span class="line">$ git show v1.0.0</span><br><span class="line">$ git tag -d v1.0.0                     # 删除</span><br><span class="line">$ git push origin v1.0.0                # 推送标签</span><br><span class="line">$ git push origin --tags</span><br><span class="line">$ git push origin :v1.0.0               # 删除远端标签</span><br><span class="line">$ git checkout -b branch_name tag_name   # 切换到某个tag</span><br></pre></td></tr></table></figure><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><h5 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#39;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39;</span><br><span class="line">之间的内容是我的修改</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">之间的内容是别人的修改</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">一般是删除冲突标记，并解决冲突</span><br></pre></td></tr></table></figure><h5 id="Vi编辑器"><a href="#Vi编辑器" class="headerlink" title="Vi编辑器"></a>Vi编辑器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi filename                       # 创建文件 touch filename</span><br><span class="line">vi编辑: i</span><br><span class="line">按ESC键 跳到命令模式</span><br><span class="line">:wq 是保存退出 </span><br><span class="line">:q! 是不保存强制退出</span><br></pre></td></tr></table></figure><h5 id="硬核配置项目git-git-config文件"><a href="#硬核配置项目git-git-config文件" class="headerlink" title="硬核配置项目git(.git/config文件)"></a>硬核配置项目git(.git/config文件)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">直接打开.git目录下的config文件进行编辑，参考内容如下</span><br><span class="line">[core]</span><br><span class="line">repositoryformatversion &#x3D; 0</span><br><span class="line">filemode &#x3D; true</span><br><span class="line">bare &#x3D; false</span><br><span class="line">logallrefupdates &#x3D; true</span><br><span class="line">ignorecase &#x3D; true</span><br><span class="line">precomposeunicode &#x3D; true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;gitee.com&#x2F;ticsmatic_admin&#x2F;CodeStore.git</span><br><span class="line">fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote &#x3D; origin</span><br><span class="line">merge &#x3D; refs&#x2F;heads&#x2F;master</span><br><span class="line">[branch &quot;develop&quot;]</span><br><span class="line">remote &#x3D; origin</span><br><span class="line">merge &#x3D; refs&#x2F;heads&#x2F;develop</span><br></pre></td></tr></table></figure><h5 id="单文件回退"><a href="#单文件回退" class="headerlink" title="单文件回退"></a>单文件回退</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset comit_id filename       # 把某个文件回退到某个提交历史，checkout也可以</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用volantis主题</title>
      <link href="/posts/6cb5ab8a/"/>
      <url>/posts/6cb5ab8a/</url>
      
        <content type="html"><![CDATA[<p>z</p><a id="more"></a><p>[TOC]</p><p><a href="https://xaoxuu.com/" target="_blank" rel="noopener">演示地址</a></p><p><a href="https://volantis.js.org/" target="_blank" rel="noopener">文档地址</a></p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p><a href="https://volantis.js.org/getting-started/" target="_blank" rel="noopener">开始使用</a><br>第1/3步：下载主题源码到 themes/ 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;xaoxuu&#x2F;hexo-theme-volantis themes&#x2F;volantis</span><br></pre></td></tr></table></figure><p>第2/3步：修改站点配置文件 blog/_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: volantis</span><br></pre></td></tr></table></figure><p>第3/3步：检查并安装依赖<br>安装 Hexo 搜索的依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-generator-search hexo-generator-json-content</span><br></pre></td></tr></table></figure><p>安装 stylus 渲染器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-renderer-stylus</span><br></pre></td></tr></table></figure><h2 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h2><p><a href="https://volantis.js.org/site-settings/" target="_blank" rel="noopener">文档</a></p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://volantis.js.org/theme-settings/" target="_blank" rel="noopener">文档</a></p><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p><a href="https://volantis.js.org/page-settings/" target="_blank" rel="noopener">文档</a></p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p><a href="https://volantis.js.org/tag-settings/" target="_blank" rel="noopener">文档</a></p><span class="p red">红色</span><p class="p center logo large">Volantis</p><div class="note"><p>为简单的一句话提供的简便写法。</p></div><div class="checkbox"><input type="radio"><p>纯文本测试</p></div>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
